{"version":3,"sources":["CandyMachine/index.js","CandyMachine/connection.js","assets/twitter-logo.svg","App.js","index.js","CandyMachine/helpers.js"],"names":["SystemProgram","web3","opts","CandyMachine","walletAddress","useState","candyMachine","setCandyMachine","getProvider","connection","Connection","process","Provider","window","solana","getCandyMachineState","a","provider","Program","fetchIdl","candyMachineProgram","idl","program","account","fetch","itemsAvailable","data","toNumber","itemsRedeemed","itemsRemaining","goLiveData","goLiveDate","goLiveDateTimeString","Date","toGMTString","id","state","isSoldOut","isActive","getTime","endSettings","endSettingType","date","number","isPresale","treasury","wallet","tokenMint","gatekeeper","whitelistMintSettings","hiddenSettings","price","console","log","useEffect","getCandyMachineCreator","candyMachineID","PublicKey","findProgramAddress","Buffer","from","toBuffer","getMetadata","mint","TOKEN_METADATA_PROGRAM_ID","getMasterEdition","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","splTokenMintAddress","keys","pubkey","isSigner","isWritable","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","mintToken","Keypair","generate","getAtaForMint","publicKey","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","signers","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","getNetworkToken","gatekeeperNetwork","push","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","undefined","sendTransactions","txs","map","t","txid","className","onClick","instructionSet","signersSet","sequenceType","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","transaction","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","then","slot","catch","reason","Promise","all","getUnixTs","DEFAULT_TIMEOUT","timeout","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","done","sleep","awaitTransactionSignatureConfirmation","confirmation","Error","err","error","simulateResult","simulateTransaction","value","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","queryStatus","status","confirmations","subId","resolve","reject","setTimeout","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","TWITTER_HANDLE","TWITTER_LINK","App","setWalletAddress","checkIfWalletIsConnected","isPhantom","connect","onlyIfTrusted","response","alert","connectWallet","renderNotConnectedContainer","onLoad","addEventListener","removeEventListener","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById","anchor","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","buyer"],"mappings":"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","file":"static/js/main.7f97106d.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { sendTransactions } from './connection';\nimport './CandyMachine.css';\nimport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  CIVIC\n} from './helpers';\n\nconst { SystemProgram } = web3;\nconst opts = {\n  preflightCommitment: 'processed',\n};\n\nconst CandyMachine = ({ walletAddress }) => {\n\n  const [candyMachine, setCandyMachine] = useState(null);\n\n  const getProvider = () => {\n    const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n    // Create a new connection object\n    const connection = new Connection(rpcHost);\n\n    // Create a new Solana provider object\n    const provider = new Provider(\n        connection,\n        window.solana,\n        opts.preflightCommitment\n    );\n\n    return provider;\n  };\n\n  const getCandyMachineState = async () => {\n    const provider = getProvider();\n    const idl = await Program.fetchIdl(candyMachineProgram, provider);\n    const program = new Program(idl, candyMachineProgram, provider);\n    const candyMachine = await program.account.candyMachine.fetch(\n        process.env.REACT_APP_CANDY_MACHINE_ID\n    );\n\n    const itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\n    const itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n    const goLiveData = candyMachine.data.goLiveDate.toNumber();\n\n    const goLiveDateTimeString = `${new Date(\n        goLiveData * 1000\n    ).toGMTString()}`\n\n    // Add this data to your state to render\n    setCandyMachine({\n      id: process.env.REACT_APP_CANDY_MACHINE_ID,\n      program,\n      state: {\n        itemsAvailable,\n        itemsRedeemed,\n        itemsRemaining,\n        goLiveData,\n        goLiveDateTimeString,\n        isSoldOut: itemsRemaining === 0,\n        isActive:\n            (false ||\n                candyMachine.data.goLiveDate.toNumber() < new Date().getTime() / 1000) &&\n            (candyMachine.endSettings\n                ? candyMachine.endSettings.endSettingType.date\n                    ? candyMachine.endSettings.number.toNumber() > new Date().getTime() / 1000\n                    : itemsRedeemed < candyMachine.endSettings.number.toNumber()\n                : true),\n        isPresale: false,\n        goLiveDate: candyMachine.data.goLiveDate,\n        treasury: candyMachine.wallet,\n        tokenMint: candyMachine.tokenMint,\n        gatekeeper: candyMachine.data.gatekeeper,\n        endSettings: candyMachine.data.endSettings,\n        whitelistMintSettings: candyMachine.data.whitelistMintSettings,\n        hiddenSettings: candyMachine.data.hiddenSettings,\n        price: candyMachine.data.price,\n      },\n    });\n\n    console.log({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString,\n    });\n  };\n\n  useEffect(() => {\n    getCandyMachineState();\n  }, []);\n\n\n  const getCandyMachineCreator = async (candyMachine) => {\n    const candyMachineID = new PublicKey(candyMachine);\n    return await web3.PublicKey.findProgramAddress(\n        [Buffer.from('candy_machine'), candyMachineID.toBuffer()],\n        candyMachineProgram,\n    );\n  };\n\n  const getMetadata = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const getMasterEdition = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n          Buffer.from('edition'),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const createAssociatedTokenAccountInstruction = (\n    associatedTokenAddress,\n    payer,\n    walletAddress,\n    splTokenMintAddress\n  ) => {\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n      { pubkey: walletAddress, isSigner: false, isWritable: false },\n      { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n    return new web3.TransactionInstruction({\n      keys,\n      programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n      data: Buffer.from([]),\n    });\n  };\n\n  const mintToken = async () => {\n    const mint = web3.Keypair.generate();\n\n    const userTokenAccountAddress = (\n      await getAtaForMint(mint.publicKey, walletAddress.publicKey)\n    )[0];\n\n    const userPayingAccountAddress = candyMachine.state.tokenMint\n      ? (await getAtaForMint(candyMachine.state.tokenMint, walletAddress.publicKey))[0]\n      : walletAddress.publicKey;\n\n    const candyMachineAddress = candyMachine.id;\n    const remainingAccounts = [];\n    const signers = [mint];\n    const cleanupInstructions = [];\n    const instructions = [\n      web3.SystemProgram.createAccount({\n        fromPubkey: walletAddress.publicKey,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports:\n          await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n            MintLayout.span,\n          ),\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        walletAddress.publicKey,\n        walletAddress.publicKey,\n      ),\n      createAssociatedTokenAccountInstruction(\n        userTokenAccountAddress,\n        walletAddress.publicKey,\n        walletAddress.publicKey,\n        mint.publicKey,\n      ),\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        userTokenAccountAddress,\n        walletAddress.publicKey,\n        [],\n        1,\n      ),\n    ];\n\n    if (candyMachine.state.gatekeeper) {\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkToken(\n            walletAddress.publicKey,\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: true,\n        isSigner: false,\n      });\n      if (candyMachine.state.gatekeeper.expireOnUse) {\n        remainingAccounts.push({\n          pubkey: CIVIC,\n          isWritable: false,\n          isSigner: false,\n        });\n        remainingAccounts.push({\n          pubkey: (\n            await getNetworkExpire(\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\n            )\n          )[0],\n          isWritable: false,\n          isSigner: false,\n        });\n      }\n    }\n    if (candyMachine.state.whitelistMintSettings) {\n      const mint = new web3.PublicKey(\n        candyMachine.state.whitelistMintSettings.mint,\n      );\n\n      const whitelistToken = (await getAtaForMint(mint, walletAddress.publicKey))[0];\n      remainingAccounts.push({\n        pubkey: whitelistToken,\n        isWritable: true,\n        isSigner: false,\n      });\n\n      if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n        const whitelistBurnAuthority = web3.Keypair.generate();\n\n        remainingAccounts.push({\n          pubkey: mint,\n          isWritable: true,\n          isSigner: false,\n        });\n        remainingAccounts.push({\n          pubkey: whitelistBurnAuthority.publicKey,\n          isWritable: false,\n          isSigner: true,\n        });\n        signers.push(whitelistBurnAuthority);\n        const exists =\n          await candyMachine.program.provider.connection.getAccountInfo(\n            whitelistToken,\n          );\n        if (exists) {\n          instructions.push(\n            Token.createApproveInstruction(\n              TOKEN_PROGRAM_ID,\n              whitelistToken,\n              whitelistBurnAuthority.publicKey,\n              walletAddress.publicKey,\n              [],\n              1,\n            ),\n          );\n          cleanupInstructions.push(\n            Token.createRevokeInstruction(\n              TOKEN_PROGRAM_ID,\n              whitelistToken,\n              walletAddress.publicKey,\n              [],\n            ),\n          );\n        }\n      }\n    }\n\n    if (candyMachine.state.tokenMint) {\n      const transferAuthority = web3.Keypair.generate();\n\n      signers.push(transferAuthority);\n      remainingAccounts.push({\n        pubkey: userPayingAccountAddress,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: transferAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n\n      instructions.push(\n        Token.createApproveInstruction(\n          TOKEN_PROGRAM_ID,\n          userPayingAccountAddress,\n          transferAuthority.publicKey,\n          walletAddress.publicKey,\n          [],\n          candyMachine.state.price.toNumber(),\n        ),\n      );\n      cleanupInstructions.push(\n        Token.createRevokeInstruction(\n          TOKEN_PROGRAM_ID,\n          userPayingAccountAddress,\n          walletAddress.publicKey,\n          [],\n        ),\n      );\n    }\n    const metadataAddress = await getMetadata(mint.publicKey);\n    const masterEdition = await getMasterEdition(mint.publicKey);\n\n    const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n      candyMachineAddress,\n    );\n\n    instructions.push(\n      await candyMachine.program.instruction.mintNft(creatorBump, {\n        accounts: {\n          candyMachine: candyMachineAddress,\n          candyMachineCreator,\n          payer: walletAddress.publicKey,\n          wallet: candyMachine.state.treasury,\n          mint: mint.publicKey,\n          metadata: metadataAddress,\n          masterEdition,\n          mintAuthority: walletAddress.publicKey,\n          updateAuthority: walletAddress.publicKey,\n          tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          clock: web3.SYSVAR_CLOCK_PUBKEY,\n          recentBlockhashes: web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          instructionSysvarAccount: web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n        },\n        remainingAccounts:\n          remainingAccounts.length > 0 ? remainingAccounts : undefined,\n      }),\n    );\n\n    try {\n      return (\n        await sendTransactions(\n          candyMachine.program.provider.connection,\n          candyMachine.program.provider.wallet,\n          [instructions, cleanupInstructions],\n          [signers, []],\n        )\n      ).txs.map(t => t.txid);\n    } catch (e) {\n      console.log(e);\n    }\n    return [];\n  };\n\n  return (\n      // Only show this if machineStats is available\n      candyMachine && (\n          <div className=\"machine-container\">\n            <p>{`Drop Date: ${candyMachine.state.goLiveDateTimeString}`}</p>\n            <p>{`Items Minted: ${candyMachine.state.itemsRedeemed} / ${candyMachine.state.itemsAvailable}`}</p>\n            <button className=\"cta-button mint-button\" onClick={mintToken}>\n              Mint NFT\n            </button>\n          </div>\n      )\n  );\n};\n\nexport default CandyMachine;\n","import { Transaction } from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\nexport const getErrorForTransaction = async (\n  connection,\n  txid\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\n\nexport async function sendTransactionsWithManualRetry(\n  connection,\n  wallet,\n  instructions,\n  signers,\n){\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          'StopOnFailure',\n          'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection,\n  wallet,\n  instructionSet,\n  signersSet,\n  sequenceType = 'Parallel',\n  commitment = 'singleGossip',\n  successCallback = (txid, ind) => {},\n  failCallback = (txid, ind) => false,\n  block,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns = [];\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n\n  const pendingTxns= [];\n\n  let breakEarlyObject = { breakEarly: false, i: 0 };\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    signedTxnPromise\n      .then(({ txid, slot }) => {\n        successCallback(txid, i);\n      })\n      .catch(reason => {\n        failCallback(signedTxns[i], i);\n        if (sequenceType === 'StopOnFailure') {\n          breakEarlyObject.breakEarly = true;\n          breakEarlyObject.i = i;\n        }\n      });\n\n    if (sequenceType !== 'Parallel') {\n      try {\n        await signedTxnPromise;\n      } catch (e) {\n        console.log('Caught failure', e);\n        if (breakEarlyObject.breakEarly) {\n          console.log('Died on ', breakEarlyObject.i);\n          // Return the txn we failed on by index\n          return {\n            number: breakEarlyObject.i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== 'Parallel') {\n    await Promise.all(pendingTxns);\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection,\n  wallet,\n  instructions,\n  signers,\n  awaitConfirmation = true,\n  commitment = 'singleGossip',\n  includesFeePayer = false,\n  block,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection,\n  wallet,\n  instructions,\n  signers,\n  commitment = 'singleGossip',\n  includesFeePayer = false,\n  block,\n  beforeSend,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}) {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection,\n  transaction,\n  commitment,\n) {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid,\n  timeout,\n  connection,\n  commitment = 'recent',\n  queryStatus = false,\n){\n  let done = false;\n  let status = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport CandyMachine from './CandyMachine';\n\n// Constants\nconst TWITTER_HANDLE = 'BondsaiPlatform';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n              'Connected with Public Key:',\n              response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n      <button\n          className=\"cta-button connect-wallet-button\"\n          onClick={connectWallet}\n      >\n        Connect to Wallet\n      </button>\n  );\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  {!walletAddress && renderNotConnectedContainer()}\n\n  return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"header-container\">\n            <p className=\"header\">🌸 Flower Drop 🌸</p>\n            {!walletAddress && renderNotConnectedContainer()}\n          </div>\n          {/* Check for walletAddress and then pass in walletAddress */}\n          {walletAddress && <CandyMachine walletAddress={window.solana} />}\n          <div className=\"footer-container\">\n            <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n            <a\n                className=\"footer-text\"\n                href={TWITTER_LINK}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n            >{`built for @${TWITTER_HANDLE}`}</a>\n          </div>\n        </div>\n      </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { web3 } from '@project-serum/anchor';\nimport * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\n// CLI Properties Given to us\nconst candyMachineProgram = new web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ'\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'\n);\n\nconst CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nconst toDate = (value) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nconst formatNumber = {\n  format: (val) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nconst getAtaForMint = async (mint, buyer)=> {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nconst getNetworkExpire = async (gatekeeperNetwork) => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nconst getNetworkToken = async (wallet, gatekeeperNetwork) => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nfunction createAssociatedTokenAccountInstruction(\n  associatedTokenAddress,\n  payer,\n  walletAddress,\n  splTokenMintAddress,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n\nexport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  CIVIC,\n  toDate,\n  formatNumber,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  createAssociatedTokenAccountInstruction,\n};\n"],"sourceRoot":""}